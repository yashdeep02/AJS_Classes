1. Installation Of Angular4 Application Setup.

2. Differences Between Angular1.x , Angular2.X and Angular4.x

3. Directory Structure Of Angular4 Application.

4. Core Components Of Angular4



1. Installation Of Angular4 Application Setup.
---------------------------------------------
    - Vendor provided Environmental Setup for Angular4 Application.

    - As a Angular4 Developer we must configure the Environmental Setup
      by using following commands.


>npm install -g "@angular/cli"

[Note : cli stands for command line interface
        cli used to create the environmental setup]



>ng new First_App

[Note : Automatically "First_App" created in Current Path]


>cd First_App

[Note : Automatically we can switch to First_App]

> ng serve

[Note "serve" is the command used to start the Angular4
      Application]

Directory Structure Of Angular4 Application:
--------------------------------------------
    - collection of folders & files under the angular4
      application called as Directory Structure

e2e:
    this folder used to write the end to end test cases.

node_modules:
    this folder contain all the modules required to
    angular4 application

src:
    as a angular4 developer we must deploy all
    "angular4 application files" in src folder

Ex.
    components
    services
    pipes
        --
        --
        --


src/app:
    - this folder used to place all the "ts" files

    Ex.
        components
        services
        pipes
            --
            --
            --

src/assets:
    - this folder used to place the static resources
      like images, fonts,....

src/environments:
    - this folder used to configure the production
      server environment.


src/favicon.ico:
    - this icon representing the default logo
      of angular

src/index.html:
    - this file acting as view in angular4
      application.


src/main.ts:
    -this file acting as booting file
     and representing which module
     need to execute

src/polyfills.ts:
    - this file representing "backend
      supporting files needs for
      browser"  to launch angular4
      application.

src/styles.css
    - this file representing global css
      styles for angular4 application.

src/test.ts:

    - this file representing basic
      unit test cases for
      angular4 application.



src/tsconfig.app.json:
src/tsconfig.spec.json:

    - this files representing
      "type script" standards/


src/typings.d.ts:
    - this file representing the
      validation rules to interact
      with the 3rd party technologies.


angular-cli.json
----------------
    - this file representing the directory structure
      of angular4 application.

karma.conf.js
-------------
    - this file used to write the
      unit test cases.

package.json
------------
    - this file representing
      required modules for building
      the angular4 application.

protractor.conf.js
------------------

    - this file meant for writing
      the integrated test cases for
      UI Application.


tsconfig.json
-------------
    - this file representing the
      configuration while converting
      the typescript to javascript.

tslint.json
-----------
    - this file representing the "order of files" execution
      in angular4 application.



Execution of Angular4 Component:
--------------------------------
    - As a Angular4 Developer we can't execute component
      directly with Angular4 Framework.

    - As a Developer we must create Module with Required
      Component

    - We Must Give the "Angular4 Module" to the "Booting file".

    - Angular4 Framework starts the Execution from
      Booting File(main.ts).

Ex.

app/component.ts
-----------------

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app';
}


app/app.module.ts
-----------------
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

main.ts
-------
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule);


Directives:
-----------
    - Directives in angular(1.X , 4.X & 5.X) Enhances the
      HTML Capabilities.

    - We Have Two Types Of Directives.

        1. Predefined Directives.

        2. Custom Directives.

Predefined Directives.

    - The Directives Given By the Angular4 Framework
      Called as Predefined Directives.



1. ngModel
    - ngModel is the one of the Predefined Directive
      in Angular4 Framework.

    - ngModel Directive used to implement the 2-way
      data binding.

    - automatic data syncronisation between model and
      view with the super vision of controller called
      as 2-way data binding.

    - ngModel Directive available in "FormsModule" class
      in Angular4.

    - FormsModule class available in "@angular/forms"
      module

    - to implement two way data binding as a developer
      we must import "FormsModule" class.

Ex.
    import {FormsModule} from "@angular/forms"

ng-model.html
-------------
<input type="number" [(ngModel)]="model_one"> <br><br>
<input type="number" [(ngModel)]="model_two"> <br><br>
<h1 style="color:red">{{model_one+model_two}}</h1>

NgModelDemo.ts
--------------
@Component({
    selector:"ng-model"
    templateUrl:"ng-model.html"
})
export class NgModelDemo{
    model_one:number=0;
    model_two:number=0;
}


Predefined Services:
--------------------
    - The Services given by the angular4 framework called
      as Predefined Services.

1. Http
    - This predefined service used to connect to servers
      by using http protocol.

    - "Http" is the Predefined Class Available in "@angular/http"
       module.

    - "Response" is the Predefined Class , used to handle
       the response from server calls.

    - "Response" class available in "@angular/http" module.


DataService.ts
--------------
import {Injectable} from "@angular/core";
import {Http,Response} from "@angular/http";

@injectable()
export class DataService{
    constructor(private http:Http){
    }
    getData(){
        this.http.get("https://www.w3schools.com/
                       angular/customers.php")
            .subscribe((res:Response)=>{
                return res;
            });
    }
}


app.component.ts
----------------
import {DataService} from "./data.service";

export class AppComponent{
    response;
    constructor(private dataService:DataService){
        this.response = dataService.getData();
    }
};

app.component.html
------------------
<h1>{{response}}</h1>


















